#load the dataset
data(mypku_testdata2)
data(mypku_testdata3)
data(mypku_testdata4)
data(webpku_aim)

----------------------------------------------------------------

```
# making logit of model z  = a0 + a1*PE
#10-fold crossvalidation by testdatabase
set.seed(1234)
i=1
myput_auc1 = rep(0, 100)
myput_acc1 <- rep(0, 100)
myput_sens1 <- rep(0, 100)
myput_spec1 <- rep(0, 100)
myput_ppv1 <- rep(0, 100)
myput_npv1 <- rep(0, 100)
for (i in c(1:100)) {
  ind <- sample(2, nrow(mypku_data1), replace=TRUE, prob=c(0.75, 0.25))
  mypku_traindata1 <- mypku_data1[ind==1,]     #creat a training dataset
  mypku_testdata1 <- mypku_data1[ind==2,]     #creat a testing dataset
  #transform the variable of result2 as a factor which is used to classify. After converting to a factor, the original variable is no longer simply a string or a value for parsing, but a category.
  mypku_traindata1 <- transform(mypku_traindata1, result=as.factor(result))
  mypku_testdata1 <- transform(mypku_testdata1, result=as.factor(result))
  mymodel1 <- glm(result~.,family = binomial(link = "logit") ,data = mypku_traindata1)
  p1 = predict(mymodel1, mypku_testdata1)
  pr1 = exp(p1)/(1+exp(p1))
  mypku_testdata1$diag = 1*(pr1>0.0948)
  conf1 <- table(mypku_testdata1$diag, mypku_testdata1$result)
  acc1 <- sum(diag(conf1))/sum(conf1)
  sens1 <- sum(conf1[2, 2])/sum(conf1[, 2])
  spec1 <- sum(conf1[1,1])/sum(conf1[, 1])
  ppv1 <- sum(conf1[2, 2])/sum(conf1[2, ])
  npv1 <- sum(conf1[1,1])/sum(conf1[1, ])
  test_pred1 <- prediction(pr1, mypku_testdata1$result)
  auc1 <- performance(test_pred1, 'auc')
  auc1 <- auc1@y.values
  myput_auc1[i] <- as.numeric(auc1)
  myput_acc1[i] <- as.numeric(acc1)
  myput_sens1[i] <- as.numeric(sens1)
  myput_spec1[i] <- as.numeric(spec1)
  myput_ppv1[i] <- as.numeric(ppv1)
  myput_npv1[i] <- as.numeric(npv1)
}
mean(myput_auc1)
mean(myput_acc1)
mean(myput_sens1)
mean(myput_spec1)
mean(myput_ppv1)
mean(myput_npv1)
sd(myput_auc1)
sd(myput_acc1)
sd(myput_sens1)
sd(myput_spec1)
sd(myput_ppv1)
sd(myput_npv1)

```
----------------------------------------------------------------

```

# making logit of model z  = a0 + a1*PE + a2*TYR
#10-fold crossvalidation by testdatabase
set.seed(1234)
i=1
myput2 = rep(0, 100)
myput_acc2 <- rep(0, 100)
myput_sens2 <- rep(0, 100)
myput_spec2 <- rep(0, 100)
myput_ppv2 <- rep(0, 100)
myput_npv2 <- rep(0, 100)
for (i in c(1:100)) {
  ind2 <- sample(2, nrow(mypku_data2), replace=TRUE, prob=c(0.75, 0.25))
  mypku_traindata2 <- mypku_data2[ind2==1,]     #creat a training dataset
  mypku_testdata2 <- mypku_data2[ind2==2,]     #creat a testing dataset
  #transform the variable of result2 as a factor which is used to classify. After converting to a factor, the original variable is no longer simply a string or a value for parsing, but a category.
  mypku_traindata2 <- transform(mypku_traindata2, result=as.factor(result))
  mypku_testdata2 <- transform(mypku_testdata2, result=as.factor(result))
  mymodel2 <- glm(result~.,family = binomial(link = "logit") ,data = mypku_traindata2)
  #testing
  p2 = predict(mymodel2, mypku_testdata2)
  pr2 = exp(p2)/(1+exp(p2))
  mypku_testdata2$diag = 1*(pr2>0.0220)
  conf2 <- table(mypku_testdata2$diag, mypku_testdata2$result)
  acc2 <- sum(diag(conf2))/sum(conf2)
  sens2 <- sum(conf2[2, 2])/sum(conf2[, 2])
  spec2 <- sum(conf2[1,1])/sum(conf2[, 1])
  ppv2 <- sum(conf2[2, 2])/sum(conf2[2, ])
  npv2 <- sum(conf2[1,1])/sum(conf2[1, ])
  test_pred2 <- prediction(pr2, mypku_testdata2$result)
  auc2 <- performance(test_pred2, 'auc')
  auc2 <- auc2@y.values
  myput2[i] <- as.numeric(auc2)
  myput_acc2[i] <- as.numeric(acc2)
  myput_sens2[i] <- as.numeric(sens2)
  myput_spec2[i] <- as.numeric(spec2)
  myput_ppv2[i] <- as.numeric(ppv2)
  myput_npv2[i] <- as.numeric(npv2)
}
mean(myput2)
mean(myput_acc2)
mean(myput_sens2)
mean(myput_spec2)
mean(myput_ppv2)
mean(myput_npv2)
sd(myput2)
sd(myput_acc2)
sd(myput_sens2)
sd(myput_spec2)
sd(myput_ppv2)
sd(myput_npv2)

```
----------------------------------------------------------------

```
# making logit of model z  = a0 + a1*PE + a2*TYR + a3*MET.PE
#10-fold crossvalidation by testdatabase
set.seed(1234)
i=1
myput_auc3 = rep(0, 100)
myput_acc3 <- rep(0, 100)
myput_sens3 <- rep(0, 100)
myput_spec3 <- rep(0, 100)
myput_ppv3 <- rep(0, 100)
myput_npv3 <- rep(0, 100)
for (i in c(1:100)) {
  ind <- sample(2, nrow(mypku_data3), replace=TRUE, prob=c(0.75, 0.25))
  mypku_traindata3 <- mypku_data3[ind==1,]     #creat a training dataset
  mypku_testdata3 <- mypku_data3[ind==2,]     #creat a testing dataset
  #transform the variable of result2 as a factor which is used to classify. After converting to a factor, the original variable is no longer simply a string or a value for parsing, but a category.
  mypku_testdata3 <- transform(mypku_testdata3, result=as.factor(result))
  mymodel3 <- glm(result~.,family = binomial(link = "logit") ,data = mypku_traindata3)
  summary(mymodel3)
  p3 = predict(mymodel3, mypku_testdata3)
  pr3 = exp(p3)/(1+exp(p3))
  mypku_traindata3$diag <- 1*(pr3>0.0579)
  conf3 <- table(mypku_testdata3$diag, mypku_testdata3$result)
  acc3 <- sum(diag(conf1))/sum(conf3)
  sens3 <- sum(conf3[2, 2])/sum(conf3[, 2])
  spec3 <- sum(conf3[1,1])/sum(conf3[, 1])
  ppv3 <- sum(conf3[2, 2])/sum(conf3[2, ])
  npv3 <- sum(conf3[1,1])/sum(conf3[1, ])
  test_pred3 <- prediction(pr3, mypku_testdata3$result)
  auc3 <- performance(test_pred3, 'auc')
  auc3 <- auc3@y.values
  myput_auc3[i] <- as.numeric(auc3)
  myput_acc3[i] <- as.numeric(acc3)
  myput_sens3[i] <- as.numeric(sens3)
  myput_spec3[i] <- as.numeric(spec3)
  myput_ppv3[i] <- as.numeric(ppv3)
  myput_npv3[i] <- as.numeric(npv3)
}
mean(myput_auc3)
mean(myput_acc3)
mean(myput_sens3)
mean(myput_spec3)
mean(myput_ppv3)
mean(myput_npv3)
sd(myput_auc3)
sd(myput_acc3)
sd(myput_sens3)
sd(myput_spec3)
sd(myput_ppv3)
sd(myput_npv3)

```
----------------------------------------------------------------

```
# making logit of model z  = a0 + a1*MET.PE
set.seed(1234)
i=1
myput_auc4 = rep(0, 100)
myput_acc4 <- rep(0, 100)
myput_sens4 <- rep(0, 100)
myput_spec4 <- rep(0, 100)
myput_ppv4 <- rep(0, 100)
myput_npv4 <- rep(0, 100)
for (i in c(1:100)) {
  ind4 <- sample(2, nrow(mypku_data4), replace=TRUE, prob=c(0.75, 0.25))
  mypku_traindata4 <- mypku_data4[ind4==1,]     #creat a training dataset
  mypku_testdata4 <- mypku_data4[ind4==2,]     #creat a testing dataset
  #transform the variable of result2 as a factor which is used to classify. After converting to a factor, the original variable is no longer simply a string or a value for parsing, but a category.
  mypku_traindata4 <- transform(mypku_traindata4, result=as.factor(result))
  mypku_testdata4 <- transform(mypku_testdata4, result=as.factor(result))
  mymodel4 <- glm(result~.,family = binomial(link = "logit") ,data = mypku_traindata4)
  summary(mymodel4)
  p4 <- predict(mymodel4, mypku_traindata4)
  pr4 <- exp(p4)/(1+exp(p4))
  mypku_traindata4$diag <- 1*(pr4>0.0220)
  conf4 <- table(mypku_testdata4$diag, mypku_testdata4$result)
  acc4 <- sum(diag(conf4))/sum(conf4)
  sens4 <- sum(conf4[2, 2])/sum(conf4[, 2])
  spec4 <- sum(conf4[1,1])/sum(conf4[, 1])
  ppv4 <- sum(conf4[2, 2])/sum(conf4[2, ])
  npv4 <- sum(conf4[1,1])/sum(conf4[1, ])
  test_pred4 <- prediction(pr4, mypku_testdata4$result)
  auc4 <- performance(test_pred4, 'auc')
  auc4 <- auc4@y.values
  myput_auc4[i] <- as.numeric(auc4)
  myput_acc4[i] <- as.numeric(acc4)
  myput_sens4[i] <- as.numeric(sens4)
  myput_spec4[i] <- as.numeric(spec4)
  myput_ppv4[i] <- as.numeric(ppv4)
  myput_npv4[i] <- as.numeric(npv4)
}
mean(myput_auc4)
mean(myput_acc4)
mean(myput_sens4)
mean(myput_spec4)
mean(myput_ppv4)
mean(myput_npv4)
sd(myput_auc4)
sd(myput_acc4)
sd(myput_sens4)
sd(myput_spec4)
sd(myput_ppv4)
sd(myput_npv4)

```
----------------------------------------------------------------

```
set.seed(1234)
i=1
myput_auc5 = rep(0, 100)
myput_acc5 <- rep(0, 100)
myput_sens5 <- rep(0, 100)
myput_spec5 <- rep(0, 100)
myput_ppv5 <- rep(0, 100)
myput_npv5 <- rep(0, 100)
for (i in c(1:100)) {
  ind5 <- sample(2, nrow(webpku_aim), replace = TRUE, prob = c(0.75, 0.25))
  trainweb <- webpku_aim[ind5 ==1, ]
  testweb <- webpku_aim[ind5 ==2, ]
  trainweb <- transform(trainweb, result=as.factor(result))
  testweb <- transform(testweb, result=as.factor(result))
  webmodel <- glm(result~.,family = binomial(link = "logit") ,data = trainweb)
  #testing
  p5 = predict(webmodel, testweb)
  pr5 <- exp(p5)/(1+exp(p5))
  testweb$diag <- 1*(pr5>0.021)
  conf5 <- table(testweb$diag, testweb$result)
  acc5 <- sum(diag(conf5))/sum(conf5)
  sens5 <- sum(conf5[2, 2])/sum(conf5[, 2])
  spec5 <- sum(conf5[1,1])/sum(conf5[, 1])
  ppv5 <- sum(conf5[2, 2])/sum(conf5[2, ])
  npv5 <- sum(conf5[1,1])/sum(conf5[1, ]) 
  test_pred5 <- prediction(pr5, testweb$result)
  pred_auc <- performance(test_pred5, 'auc')
  pred_auc <- pred_auc@y.values
  myput_auc5[i] <- as.numeric(pred_auc)
  myput_acc5[i] <- as.numeric(acc5)
  myput_sens5[i] <- as.numeric(sens5)
  myput_spec5[i] <- as.numeric(spec5)
  myput_ppv5[i] <- as.numeric(ppv5)
  myput_npv5[i] <- as.numeric(npv5)
}
mean(myput_auc5)
mean(myput_acc5)
mean(myput_sens5)
mean(myput_spec5)
mean(myput_ppv5)
mean(myput_npv5)
sd(myput_auc5)
sd(myput_acc5)
sd(myput_sens5)
sd(myput_spec5)
sd(myput_ppv5)
sd(myput_npv5)

```
----------------------------------------------------------------

Author(and email)
Zhixing Zhu(981164372@qq.com)






